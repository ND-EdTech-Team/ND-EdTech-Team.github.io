<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AE</title>
  
  <subtitle>工程院技术博客</subtitle>
  <link href="/blogs/atom.xml" rel="self"/>
  
  <link href="https://github.com/ND-EdTech-Team/blogs/"/>
  <updated>2020-07-17T06:46:55.739Z</updated>
  <id>https://github.com/ND-EdTech-Team/blogs/</id>
  
  <author>
    <name>ND</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端组件化开发实践</title>
    <link href="https://github.com/ND-EdTech-Team/blogs/2020/07/17/mobile-component-develop/"/>
    <id>https://github.com/ND-EdTech-Team/blogs/2020/07/17/mobile-component-develop/</id>
    <published>2020-07-17T04:46:31.000Z</published>
    <updated>2020-07-17T06:46:55.739Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>王杰光 网龙开发者团队 6月23日</p></blockquote><h1 id="1-组件化开发的背景"><a href="#1-组件化开发的背景" class="headerlink" title="1. 组件化开发的背景"></a>1. 组件化开发的背景</h1><p>移动端的开发随着功能需求的增加，移动端的业务也越来越复杂。同时，为了支撑公司快速地尝试各种机会，已经开发的功能的复用也越来越成为非常重要的事情。为了公司适应业务模式，我们的移动端开发在2015年开始组件化的改造。</p><p>从架构演进的来看，移动端的开发也是从单体模式往组件化发展。</p><p>单体的痛点是代码高度耦合、无法大团队共同开发，维护成本高昂，也无法快速响应客户需求，更无法支撑不同的客户。这是显而易见的，我们无法在一个项目中适配不同的产品规格和功能需求。</p><p>因此过渡到模块化是很自然的事情，也是移动端在代码库和依赖管理层而可以直接支持的机制。将不同的功能模块，拆成独立的Library，交给不同的团队开发，最后每个不同的产品都有一个 Application的工程，将所需要的这些Library包含进来，再做一些产品层面的开发，构建成一个应用。这是大多数开发团队会采用的方案。</p><img src="/blogs/2020/07/17/mobile-component-develop/01.png" class=""><p>在这样的方案下，可以把不同的功能模块拆解掉了，但是有一个痛点是功能模块间的直接依赖所带来的沟通协作问题，特别是由于允许代码直接依赖，是如果解耦设计不到位，很难完美地剥离一个功能模块。同时，这个方案有一个约束，就非常明显地显现出来，也就是，每次新增的产品及产品的功能演进，都必须由开发介入来操刀处理。对于业务比较聚焦，功能需求相对可控，开发团队人数不多的情况下，还是一个比较简易可行的方案。</p><p>技术的演进始终是由业务驱动的，网龙的业务模式的一个特殊的地方在于，公司希望可以快速支撑任何看到的新的市场机会，所以，会有非常多的完全不同规格的产品被创建出来，给不同的客户演示和试用，投入正式使用的产品也会非常多。</p><p>基于这样的需求，如果仅仅采用模块化的方案，产品的交付都需要开发同学的大量的介入，是很难满足需求的。因此，我们进一步的演进到下一个阶段，即组件化开发的阶段。</p><h1 id="2-组件化开发"><a href="#2-组件化开发" class="headerlink" title="2. 组件化开发"></a>2. 组件化开发</h1><h2 id="2-1-概念模型"><a href="#2-1-概念模型" class="headerlink" title="2.1 概念模型"></a>2.1 概念模型</h2><img src="/blogs/2020/07/17/mobile-component-develop/00.png" class=""><p>上图是我们组件化开发的概念图。</p><p>我们将组件定义为包含业务能力和交互的自包含的业务模块。所图所示，在组件化模式下，组件间的代码直接依赖被禁止。所有的组件都基于组件框架开发，由组件框架提供组件间的消息通信的机制、组件间页面跳转的机制以及跨组件数据访问的机制。同时，将组件的可配置部分剥离出来，作为配置层，包含了功能配置、皮肤、语言等。在这样的架构下，每个产品，通过挑选组件，配置组件的参数，修改语言资源，定制自己的皮肤，即可输出个性化的移动端App。</p><p>另外，值得特别说明的是，在这个设计中，一个组件包含了Android和iOS两端，也就是 虽然代码实现不同，具体的实现规范因平台而略有差异，但是在抽象的层面上，Android和iOS保持功能规格、对外接口的一致性。</p><h2 id="2-2-组件的声明"><a href="#2-2-组件的声明" class="headerlink" title="2.2 组件的声明"></a>2.2 组件的声明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">namespace</span>=<span class="string">"com.nd"</span> <span class="attr">name</span>=<span class="string">"im"</span> <span class="attr">display</span>=<span class="string">"组件显示名称"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pages</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span> <span class="attr">type</span>=<span class="string">"cmp"</span> <span class="attr">name</span>=<span class="string">"chatlist"</span> <span class="attr">display</span>=<span class="string">"聊天列表"</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">type</span>=<span class="string">"数据类型"</span> <span class="attr">name</span>=<span class="string">"prop_name"</span> <span class="attr">displayName</span>=<span class="string">"属性名称"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">type</span>=<span class="string">"数据类型"</span> <span class="attr">name</span>=<span class="string">"prop_name"</span> <span class="attr">displayName</span>=<span class="string">"属性名称"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">events</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">event</span> <span class="attr">name</span>=<span class="string">"im_on_message"</span> <span class="attr">desc</span>=<span class="string">"消息到达时通知"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">events</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handler</span> <span class="attr">name</span>=<span class="string">"goChat"</span> <span class="attr">desc</span>=<span class="string">"进入聊天页面"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.nd.xxxxxxx<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">            compile('com.nd.smartcan:appfactory:0.7.3.13-SNAPSHOT@aar')&#123;</span><br><span class="line">                     transitive =true</span><br><span class="line">                     changing =true</span><br><span class="line">            &#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ios</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">            pod 'Objection','0.x.0'</span><br><span class="line">        ]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ios</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的组件声明，涉及到几个跟组件化相关的概念：</p><p><strong>组件页面</strong>：组件内暴露给外部的页面，用于外部容器页面或者页面跳转，通过URI的形式来描述，详见下面说明。</p><p><strong>事件</strong>： 因为组件内部逻辑产生的事件，但是可能对外产生影响，以事件形式触发，由外部组件接收后处理。</p><p><strong>事件处理器</strong>： 一个组件可以用于响应外部事件的入口。</p><p><strong>属性</strong>：组件或者页面，提供给外部的配置参数以改变组件的行为。在设计阶段，可以将抽取出一些可配置的参数，将组件或者页面的行为延迟到配置期由产品配置人员决定，以满足不同产品的差异化需求。</p><p>在组件声明的最后声明了如果要使用这个组件，工程中要依赖的代码库。这是用于最后生成待编译的工程。</p><h2 id="2-3-主要议题"><a href="#2-3-主要议题" class="headerlink" title="2.3 主要议题"></a>2.3 主要议题</h2><h3 id="2-3-1-页面跳转"><a href="#2-3-1-页面跳转" class="headerlink" title="2.3.1 页面跳转"></a>2.3.1 页面跳转</h3><p>以上为页面URI的形式。</p><p>对于页面的跳转，Android通过Intent来实现，iOS通过UIController来实现，都需要在代码层面来处理，对于组件间的彻底解耦，都不太有利，同时还有深深的平台的差异性。我们参考http协议规范，定义了抽象的页面URI描述形式来描述一个页面的地址，就可以在任何位置利用这个页面的URI通过我们的框架提供的goPage方法来执行页面的跳转切换。同时，利用这种文本化的方式，也非常有利于配置。</p><p>同时，这样通用的URI形式，也为我们将来支持非原生的组件形式提供了非常一致的页面表示形式。</p><h3 id="2-3-2-事件绑定"><a href="#2-3-2-事件绑定" class="headerlink" title="2.3.2 事件绑定"></a>2.3.2 事件绑定</h3><p>从逻辑上，组件通过触发事件的方式告诉外部发生了一件事，但是并不关心哪个组件对这个事件作了响应。组件间通过事件来通信，部分情况下，相关的业务组件，可以在代码中直接作事件的绑定，实现业务的对接。但是，在很多情况下，在开发期并确定一个事件发生后的交互，可以在组件声明中声明这个事件，将来通过可视化的配置工具来跟外部组件的事件处理器作绑定。以实现配置期对产品功能的定制。</p><p>通过事件的机制，各个组件间实现了代码的解耦。最直接的收益就是，不会因为加入一个组件，会因为组件代码上的依赖关系，带入非常多预期之外的组件代码。</p><h3 id="2-3-3-跨组件数据访问"><a href="#2-3-3-跨组件数据访问" class="headerlink" title="2.3.3 跨组件数据访问"></a>2.3.3 跨组件数据访问</h3><p>在实际业务中，经常会有跨组件的数据访问。在模块化方式下，直接调用所需的数据接口，即可得到。而在组件化架构下，如果通过事件通信的机制，需要数据提供方在收到事件后，再通过事件将数据返回回去，这样的方式业务开发起来，总是会比较绕。代码不那么直观和好理解。特别是在我们的组件化架构下，每个组件都应该是可以被替换的，同样的，除了某些特别的组件，每个组件也不能假设某个组件一定会被打包进来。同时，数据提供者也可能是多个。</p><p>我们的组件化框架提供类似Android的ContentProvider的跨组件数据访问协议，使不同的业务组件可以进行数据访问。核心思想是通过一个过滤器(filter)来解耦数据提供者和数据的消费者。数据提供者声明自己实现一个 filter，系统中可以有多个数据提供者声明同一个filter。而数据的消费者，通过filter来查找数据提供者，得到符合条件的数据提供者后，即可使用标准的方案获取数据。我们在实际的实现中，根据数据提供者提供的数据是列表类型还是明细数据，提供不同的获取接口。</p><h3 id="2-3-4-组件的注册发现"><a href="#2-3-4-组件的注册发现" class="headerlink" title="2.3.4 组件的注册发现"></a>2.3.4 组件的注册发现</h3><p>这部分需要有一个组件库，把上面的组件声明入库，先不考虑太多复杂的关系的话，这个组件的注册、发现暂时就只是一个元数据的管理和使用。</p><h3 id="2-3-5-组件的生命周期"><a href="#2-3-5-组件的生命周期" class="headerlink" title="2.3.5 组件的生命周期"></a>2.3.5 组件的生命周期</h3><p>在组件化的架构下，我们的应用实际上是通过应用框架集成多们业务组件，并通过业务组件实现应用的业务功能。因此，就象应用会有启动、运行、结束的生命周期一样，框架需要为组件提供相应的生命周期事件，让组件在框架的调度下实现组件的初始化、事件的注册监听、组件的销毁等操作。</p><h2 id="2-4、混合组件开发"><a href="#2-4、混合组件开发" class="headerlink" title="2.4、混合组件开发"></a>2.4、混合组件开发</h2><p>移动端开发，有多种跨平台开发的技术方案，最常见的当属 H5和React Native(RN）。在很多情况下，跨平台开发的技术方案可以满足快速交付的要求，同时，也可以契合局部动态更新的需求，因此，组件化框架也需要支持H5和RN开发的组件。从抽象的角度组件化框架需要为这些组件提供一致的编程接口，使得一个组件在跟另一个组件有交互时，不需要了解对方是用原生开发的还是H5或者RN开发的。</p><p>对于H5或者RN开发的组件，需要有JSBridge来提供原生能力的调用，这部分的设计需要保持一致性。由于今天 我们讨论的是整体的组件化架构，这个细节，先不在这里讨论。</p><p>我们可以认为组件是按照相同的组件协议接入到组件框架中。而不同类型的组件(原生、H5、RN)在接入时，需要有对应的组件管理器来管理对应类型的组件，完成协议的功能。如下图所示：</p><img src="/blogs/2020/07/17/mobile-component-develop/02.png" class=""><p>从概念上看，每个不同的组件管理器，都是不同开发语言下对组件协议的封装，或者说是不同的组件协议的实现实例。因此，我们需要在全局实现一个协议管理器，来实现对所有不同的组件协议实例的注册管理和调度。</p><img src="/blogs/2020/07/17/mobile-component-develop/03.png" class=""><p>具体来说，协议管理器需要完成以下职责：</p><p>1、上面的组件页面URI的协议部分，可以扩充其它类型的组件协议，例如：</p><p>rn://react-native-component-name/page<br>h5://h5-native-component-name/page</p><p>所有的页面跳转，由协议管理器根据具体的协议头派发给对应的组件管理器执行。</p><p>2、事件响应的通道，事件通过协议管理器向几种不同的组件管理器转发，并获得响应。事件发送方不需要了解事件是由哪种类型的组件触发的。事件处理方也不需要关心事件的来源。通过协议管理器，可以将组件彻底解耦。</p><h1 id="开发流程和工具支持"><a href="#开发流程和工具支持" class="headerlink" title="开发流程和工具支持"></a>开发流程和工具支持</h1><p>在这样的组件化的整体设计之下，必然需要调整整体的开发、测试、发布的流程和工具来与之配合。这里我也稍微展开介绍一下。</p><h2 id="3-1-组件的开发、测试、发布流程"><a href="#3-1-组件的开发、测试、发布流程" class="headerlink" title="3.1 组件的开发、测试、发布流程"></a>3.1 组件的开发、测试、发布流程</h2><p>这里我们有一些工具的支持：</p><p>1、开发者门户：所有的开发团队在开发者门户上创建移动组件，会自动创建git仓库，进行代码管理。</p><p>2、组件化CI/CD支持：对应的组件在特性开发完成后，可以在开发者门户上作线上提测、构建、发布的流程，最终组件的代码构建出Library进入我们的 maven/cocopods/npm 仓库。</p><p>3、组件化功能测试和集成测试工具支持：开发团队所开发的组件，是无法独立运行的，必须要跟框架集成，跟其它组件打包在一起，形成一个产品。测试工具集成了相关的基础能力（包含iOS的开发者证书的支持），让组件开发只关注于组件本身的业务。</p><p>4、国际化翻译的工具和流程支持，从上图可以看到，开发者只需要提供中文的语言资源，其它的语言资源会由翻译团队提供，并通过QA打包到App中验证后发布。</p><p>5、还有其它组件化治理相关的工具，主要解决一些组件规范的问题，及早发现问题，避免跨团队的问题排查，如资源冲突的扫描，App上架规范的扫描等等。</p><h2 id="3-2-应用的配置、发布流程"><a href="#3-2-应用的配置、发布流程" class="headerlink" title="3.2 应用的配置、发布流程"></a>3.2 应用的配置、发布流程</h2><p>开发完成了组件，最终要组装成App，需要有一个装配到发布的流程，如下：</p><img src="/blogs/2020/07/17/mobile-component-develop/root.png" class=""><p>上面的流程，通过我们的应用工厂这样的可视化的配置和完整的流程工具来支持。</p><p>1、应用的可视化配置：创建应用后，在应用的编辑介面上选择组件，配置应用级的全局参数，组件的参数，以及组件间的页面跳转关系，绑定事件响应关系，同时，需要创建一些聚合的页面，例如App首页。</p><p>2、应用的线上构建、测试、发布流程：我们提供了在线编辑器，用于创建App，挑选组件，配置组件，最后作打包、测试、发布。其中，由于应用的测试和发布，并没有开发参与，每次的新特性需要小范围验证，因此，我们还支持了灰度发布的特性。也就是，一个应用的新版本，可以指定符合一定条件的用户先体验，作功能测试或者功能验证。灰度验证一段时间后，再决定是否发布这个版本。</p><p>从上面的流程图，我们可以很清楚地看出，我们将开发、测试、产品的职责很好地分开了。开发人员只需要负责组年的设计、开发。组件QA负责组件的测试、发布。而产品方创建和发布产品，只需要产品方的配置和产品QA就可以了。从而可以从流程上，实现了职责分离，提高效率。</p><p>从整体的效果上看，网龙的移动端开发团队在 Android和iOS都有超过100人的规模时，可以很好的分工协作，分别以比较小的团队开发业务组件，最后集成出功能复杂的产品。而产品方可以在不需要开发配合的情况下，就可以打出想要的App，有力地支持了网龙的业务模式。</p><h1 id="组件化治理"><a href="#组件化治理" class="headerlink" title="组件化治理"></a>组件化治理</h1><p>大团队的组件化开发，除了可以获得各组件解耦后各自迭代，有利于大团队分工协作的好处外，也必然引入一些问题，需要建立规范和提供必要的工具，实现组件化的治理。</p><h2 id="4-1-包名-类名规范"><a href="#4-1-包名-类名规范" class="headerlink" title="4.1 包名/类名规范"></a>4.1 包名/类名规范</h2><p>Android下避免类名冲突比较简单，只要不同的组件使用不同的包名即可。这个部分我们在创建项目时分配，可以确保了唯一性。</p><p>而iOS下，要避免类名冲突，没有其它办法，就只能通过类名前缀了，这个需要做些约定。</p><h2 id="4-2-资源规范"><a href="#4-2-资源规范" class="headerlink" title="4.2 资源规范"></a>4.2 资源规范</h2><p>Android下，不同组件的资源，在App集成时会合并，此时同名的资源会冲突造成App构建不成功。为了避免不同组件的资源冲突，我们约定资源的名称以组件包名为前缀，这样就可以解决这个问题。</p><p>iOS下，不同的组件创建自己的bundle即可作资源的隔离了。</p><h2 id="4-3-第三方依赖库规范"><a href="#4-3-第三方依赖库规范" class="headerlink" title="4.3 第三方依赖库规范"></a>4.3 第三方依赖库规范</h2><p>在App开发过程中，不可避免地需要引入第三方库，成熟的第三方库对于现在的开发至关重要，让大家不去重复造轮子，集中精力于当前的业务。</p><p>组件化后，第三方库的治理有两个目的：</p><p>1、避免重复的引入同类的不同第三方库，这样会造成大量的代码冗余，造成应用包太大，引发一系列的问题。例如，Android的类方法超标、启动性能问题，甚至无法上架。</p><p>2、需要协调第三方库的版本，第三方库的不同版本，不一定是兼容的，不同的组件如果依赖同一个第三方库的不版本，在产品集成时，按默认规则会引入高版本，而高版本如果存在不兼容，在一些组件下可能会引起崩溃。</p><p>因此网龙的移动端第三方库的引入，使用了白名单的机制，白名单以外的第三方库不被允许，并且直接在产品构建时失败，无法出包。在白名单机制下，引入新的第三方库，需要引入团队提交报告，说明引入的目的和第三方库选型的依据。特别要说明这个新的第三方库与其它同类库相比的优势在哪里，因为第三方库的排它性，原则上，将来会拒绝同类第三方库的引入，这一步需要比较慎重。同时，第三方库的版本变更，也需要所有依赖的组件协同，共同验证后才能升级。</p><p>本文介绍了网龙在移动端组件化开发方面整体的技术方案和思路，整个方案涉及到的流程比较长，面也比较广，很多方面只是点到为止，希望可以给大家带来一些启发。其中涉及到的一些课题或者技术细节，在以后的分享中有机会再展开。</p><p>（作者： 资深软件开发工程师  王杰光）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;王杰光 网龙开发者团队 6月23日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-组件化开发的背景&quot;&gt;&lt;a href=&quot;#1-组件化开发的背景&quot; class=&quot;headerlink&quot; title=&quot;1. 组件化开发的背景&quot;&gt;&lt;/a&gt;1. 
      
    
    </summary>
    
    
      <category term="移动端" scheme="https://github.com/ND-EdTech-Team/blogs/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="组件化" scheme="https://github.com/ND-EdTech-Team/blogs/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>fish-pro简介</title>
    <link href="https://github.com/ND-EdTech-Team/blogs/2020/07/16/fish-pro%E7%AE%80%E4%BB%8B/"/>
    <id>https://github.com/ND-EdTech-Team/blogs/2020/07/16/fish-pro%E7%AE%80%E4%BB%8B/</id>
    <published>2020-07-16T11:56:11.000Z</published>
    <updated>2020-07-17T06:47:09.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fish-pro-是什么"><a href="#fish-pro-是什么" class="headerlink" title="fish pro 是什么"></a>fish pro 是什么</h1><p>fish pro 是一套基于 react 的 <strong>通用后台管理最佳实践</strong>，为工程院提供一套管理后台快速开发能力，可以通过：<a href="http://fish-design-pro-test.k8s.sdp.nd/#/demo/crud/modal" target="_blank" rel="noopener">http://fish-design-pro-test.k8s.sdp.nd/</a> 进行预览。</p><p><a name="uJe4M"></a></p><h2 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h2><p><a name="ArtqG"></a></p><h3 id="1、快速创建后台项目的能力"><a href="#1、快速创建后台项目的能力" class="headerlink" title="1、快速创建后台项目的能力"></a>1、快速创建后台项目的能力</h3><p>通过 <a href="http://githoniel.gitee.io/toolkit-doc/#/" target="_blank" rel="noopener">toolkit</a> 命令行（<a href="http://githoniel.gitee.io/toolkit-doc/#/zh-cn/api/gmc/readme" target="_blank" rel="noopener">@gem-mine/cli</a>）直接创建，未来还可以通过可视化界面进行。依托于 <a href="http://githoniel.gitee.io/toolkit-doc/#/" target="_blank" rel="noopener">toolkit</a> 还能够进行项目的版本检测与自动化升级，也就是说 fish pro 在不断发展的同时，你会及时收到其什么时候发布了版本，更新的内容，并且可以自动化升级。</p><p><a name="A9PBZ"></a></p><h3 id="2、成熟、高效的项目构建能力"><a href="#2、成熟、高效的项目构建能力" class="headerlink" title="2、成熟、高效的项目构建能力"></a>2、成熟、高效的项目构建能力</h3><p>基于 <a href="http://githoniel.gitee.io/toolkit-doc/#/" target="_blank" rel="noopener">toolkit</a> 的构建能力（<a href="http://githoniel.gitee.io/toolkit-doc/#/zh-cn/api/gms/readme" target="_blank" rel="noopener">@gem-mine/script</a>），当然还支持进行自定义处理。例如你可以添加 plugin、loader 以及任何你想自定义 webpack 的能力。</p><p><a name="aF8uG"></a></p><h3 id="3、健壮的-react-基础能力"><a href="#3、健壮的-react-基础能力" class="headerlink" title="3、健壮的 react 基础能力"></a>3、健壮的 react 基础能力</h3><p>集成了 react 中非常常用的两个能力</p><ul><li>数据流管理（<a href="https://www.yuque.com/gem-mine/util/durex-overview" target="_blank" rel="noopener">@gem-mine/durex</a>），基于redux 但比 redux 好用太多</li><li>路由管理（<a href="https://www.yuque.com/gem-mine/util/router-overview" target="_blank" rel="noopener">@gem-mine/durex-router</a>），配置型路由管理，包括了权限配置、路由拆包按需等能力</li></ul><p><a name="aTztv"></a></p><h3 id="4、方便、实用的工具库、UI-库"><a href="#4、方便、实用的工具库、UI-库" class="headerlink" title="4、方便、实用的工具库、UI 库"></a>4、方便、实用的工具库、UI 库</h3><ul><li>请求库（<a href="https://www.yuque.com/gem-mine/util/request-overview" target="_blank" rel="noopener">@gem-mine/request</a>），支持多域、多环境请求能力，通过切面定制通用异常、loading 处理。同时 fish pro 在此基础上适配 WAF 跨域能力</li><li>不可变数据（<a href="https://www.yuque.com/gem-mine/util/immutable-overview" target="_blank" rel="noopener">@gem-mine/immutable</a>），小而可爱的 immutable 工具，提升性能的同时也提升了编码体验</li><li>国际化能力（<a href="https://www.yuque.com/gem-mine/util/intl-overview" target="_blank" rel="noopener">@gem-mine/intl</a>），简单有效的多语言能力，支持本地、远程模式</li><li>工程院 SDK 集合（<a href="https://www.yuque.com/gem-mine/util/one-overview" target="_blank" rel="noopener">@sdp.nd/one</a>），包装好了 one，可以快速接入工程院的 uc、oms、rbac 等能力</li><li>fish UI ，这个无需多言，历时两年多，工程院 react 技术栈 PC WEB 项目标配 UI 组件库</li></ul><p><a name="i0lN9"></a></p><h3 id="5、提供后台通用能力"><a href="#5、提供后台通用能力" class="headerlink" title="5、提供后台通用能力"></a>5、提供后台通用能力</h3><ul><li>提供后台常用的布局、菜单、导航、面包屑能力，菜单、面包屑通过配置化方式编写。同时这些能力可以通过 url 参数进行关闭或打开，可以方便于作为独立页面接入其他站点（例如聚合后台）</li><li>精心准备了常用的开发模式：各种表单表格（单页、多页、行内、卡片）、富文本、图表 等等</li><li>提供了通用的组件，包括：通用请求loading、异常处理、403、404、500 处理 等等</li></ul><p><a name="Vhqtw"></a></p><h3 id="6、满足个性化需求"><a href="#6、满足个性化需求" class="headerlink" title="6、满足个性化需求"></a>6、满足个性化需求</h3><ul><li>构建能力自定义能力，你可以自定义 webpack 相关能力，例如 plugins、loaders 等等</li><li>页面、组件的自定义能力，对于页面、组件只需要满足 react 技术栈即可进行开发</li></ul><p><a name="bZ09D"></a></p><h3 id="7、符合工程院-UE-设计规范"><a href="#7、符合工程院-UE-设计规范" class="headerlink" title="7、符合工程院 UE 设计规范"></a>7、符合工程院 UE 设计规范</h3><p>和 UEDC 团队配合，遵循 UE 对应规范</p><p><a name="SBprF"></a></p><h2 id="选型判断"><a href="#选型判断" class="headerlink" title="选型判断"></a>选型判断</h2><p>如果你需要开发一个后台管理系统，存在以下的需求：</p><ul><li>希望具有通用的后台能力，例如：布局、菜单、面包屑 等能力</li><li>希望后台能够快速接入工程院基础能力：UC、RBAC、CS 等</li><li>希望后台可以被聚合后台 或其他前台项目快速接入复用</li><li>希望后台具有较强的自定义能力，例如：主体内容个性化展示</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fish-pro-是什么&quot;&gt;&lt;a href=&quot;#fish-pro-是什么&quot; class=&quot;headerlink&quot; title=&quot;fish pro 是什么&quot;&gt;&lt;/a&gt;fish pro 是什么&lt;/h1&gt;&lt;p&gt;fish pro 是一套基于 react 的 &lt;strong
      
    
    </summary>
    
    
      <category term="Web" scheme="https://github.com/ND-EdTech-Team/blogs/categories/Web/"/>
    
    
      <category term="Fish" scheme="https://github.com/ND-EdTech-Team/blogs/tags/Fish/"/>
    
      <category term="后台" scheme="https://github.com/ND-EdTech-Team/blogs/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="https://github.com/ND-EdTech-Team/blogs/2020/07/16/%E5%89%8D%E8%A8%80/"/>
    <id>https://github.com/ND-EdTech-Team/blogs/2020/07/16/%E5%89%8D%E8%A8%80/</id>
    <published>2020-07-16T10:46:59.000Z</published>
    <updated>2020-07-16T10:52:21.854Z</updated>
    
    <content type="html"><![CDATA[<p>  网龙华渔教育开发者团队，致力于通过互联网技术探索教育的本源和未来趋势，以教育愿景为驱动力，立足于基础科学、创新性技术和应用技术。我们用强大的技术能力，构建开放的教育生态系统和专注于教育领域的网络社区。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  网龙华渔教育开发者团队，致力于通过互联网技术探索教育的本源和未来趋势，以教育愿景为驱动力，立足于基础科学、创新性技术和应用技术。我们用强大的技术能力，构建开放的教育生态系统和专注于教育领域的网络社区。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
